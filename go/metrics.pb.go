// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

/*
Package io_prometheus_client is a generated protocol buffer package.

It is generated from these files:
	metrics.proto

It has these top-level messages:
	LabelPair
	Gauge
	Counter
	Quantile
	Summary
	Untyped
	Histogram
	Bucket
	Metric
	MetricFamily
*/
package io_prometheus_client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricType int32

const (
	MetricType_COUNTER   MetricType = 0
	MetricType_GAUGE     MetricType = 1
	MetricType_SUMMARY   MetricType = 2
	MetricType_UNTYPED   MetricType = 3
	MetricType_HISTOGRAM MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "SUMMARY",
	3: "UNTYPED",
	4: "HISTOGRAM",
}
var MetricType_value = map[string]int32{
	"COUNTER":   0,
	"GAUGE":     1,
	"SUMMARY":   2,
	"UNTYPED":   3,
	"HISTOGRAM": 4,
}

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}
func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}
func (x *MetricType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_value, data, "MetricType")
	if err != nil {
		return err
	}
	*x = MetricType(value)
	return nil
}
func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LabelPair struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LabelPair) Reset()                    { *m = LabelPair{} }
func (m *LabelPair) String() string            { return proto.CompactTextString(m) }
func (*LabelPair) ProtoMessage()               {}
func (*LabelPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LabelPair) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LabelPair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Gauge struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Gauge) Reset()                    { *m = Gauge{} }
func (m *Gauge) String() string            { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()               {}
func (*Gauge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Gauge) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type Counter struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Counter) Reset()                    { *m = Counter{} }
func (m *Counter) String() string            { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()               {}
func (*Counter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Counter) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type Quantile struct {
	Quantile         *float64 `protobuf:"fixed64,1,opt,name=quantile" json:"quantile,omitempty"`
	Value            *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Quantile) Reset()                    { *m = Quantile{} }
func (m *Quantile) String() string            { return proto.CompactTextString(m) }
func (*Quantile) ProtoMessage()               {}
func (*Quantile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Quantile) GetQuantile() float64 {
	if m != nil && m.Quantile != nil {
		return *m.Quantile
	}
	return 0
}

func (m *Quantile) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type Summary struct {
	SampleCount      *uint64     `protobuf:"varint,1,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
	SampleSum        *float64    `protobuf:"fixed64,2,opt,name=sample_sum,json=sampleSum" json:"sample_sum,omitempty"`
	Quantile         []*Quantile `protobuf:"bytes,3,rep,name=quantile" json:"quantile,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Summary) Reset()                    { *m = Summary{} }
func (m *Summary) String() string            { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()               {}
func (*Summary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Summary) GetSampleCount() uint64 {
	if m != nil && m.SampleCount != nil {
		return *m.SampleCount
	}
	return 0
}

func (m *Summary) GetSampleSum() float64 {
	if m != nil && m.SampleSum != nil {
		return *m.SampleSum
	}
	return 0
}

func (m *Summary) GetQuantile() []*Quantile {
	if m != nil {
		return m.Quantile
	}
	return nil
}

type Untyped struct {
	Value            *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Untyped) Reset()                    { *m = Untyped{} }
func (m *Untyped) String() string            { return proto.CompactTextString(m) }
func (*Untyped) ProtoMessage()               {}
func (*Untyped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Untyped) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type Histogram struct {
	SampleCount      *uint64   `protobuf:"varint,1,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
	SampleSum        *float64  `protobuf:"fixed64,2,opt,name=sample_sum,json=sampleSum" json:"sample_sum,omitempty"`
	Bucket           []*Bucket `protobuf:"bytes,3,rep,name=bucket" json:"bucket,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Histogram) Reset()                    { *m = Histogram{} }
func (m *Histogram) String() string            { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()               {}
func (*Histogram) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Histogram) GetSampleCount() uint64 {
	if m != nil && m.SampleCount != nil {
		return *m.SampleCount
	}
	return 0
}

func (m *Histogram) GetSampleSum() float64 {
	if m != nil && m.SampleSum != nil {
		return *m.SampleSum
	}
	return 0
}

func (m *Histogram) GetBucket() []*Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

type Bucket struct {
	CumulativeCount  *uint64  `protobuf:"varint,1,opt,name=cumulative_count,json=cumulativeCount" json:"cumulative_count,omitempty"`
	UpperBound       *float64 `protobuf:"fixed64,2,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Bucket) Reset()                    { *m = Bucket{} }
func (m *Bucket) String() string            { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()               {}
func (*Bucket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Bucket) GetCumulativeCount() uint64 {
	if m != nil && m.CumulativeCount != nil {
		return *m.CumulativeCount
	}
	return 0
}

func (m *Bucket) GetUpperBound() float64 {
	if m != nil && m.UpperBound != nil {
		return *m.UpperBound
	}
	return 0
}

type Metric struct {
	Label            []*LabelPair `protobuf:"bytes,1,rep,name=label" json:"label,omitempty"`
	Gauge            *Gauge       `protobuf:"bytes,2,opt,name=gauge" json:"gauge,omitempty"`
	Counter          *Counter     `protobuf:"bytes,3,opt,name=counter" json:"counter,omitempty"`
	Summary          *Summary     `protobuf:"bytes,4,opt,name=summary" json:"summary,omitempty"`
	Untyped          *Untyped     `protobuf:"bytes,5,opt,name=untyped" json:"untyped,omitempty"`
	Histogram        *Histogram   `protobuf:"bytes,7,opt,name=histogram" json:"histogram,omitempty"`
	TimestampMs      *int64       `protobuf:"varint,6,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Metric) GetLabel() []*LabelPair {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Metric) GetGauge() *Gauge {
	if m != nil {
		return m.Gauge
	}
	return nil
}

func (m *Metric) GetCounter() *Counter {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *Metric) GetSummary() *Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *Metric) GetUntyped() *Untyped {
	if m != nil {
		return m.Untyped
	}
	return nil
}

func (m *Metric) GetHistogram() *Histogram {
	if m != nil {
		return m.Histogram
	}
	return nil
}

func (m *Metric) GetTimestampMs() int64 {
	if m != nil && m.TimestampMs != nil {
		return *m.TimestampMs
	}
	return 0
}

type MetricFamily struct {
	Name             *string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Help             *string     `protobuf:"bytes,2,opt,name=help" json:"help,omitempty"`
	Type             *MetricType `protobuf:"varint,3,opt,name=type,enum=io.prometheus.client.MetricType" json:"type,omitempty"`
	Metric           []*Metric   `protobuf:"bytes,4,rep,name=metric" json:"metric,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MetricFamily) Reset()                    { *m = MetricFamily{} }
func (m *MetricFamily) String() string            { return proto.CompactTextString(m) }
func (*MetricFamily) ProtoMessage()               {}
func (*MetricFamily) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MetricFamily) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MetricFamily) GetHelp() string {
	if m != nil && m.Help != nil {
		return *m.Help
	}
	return ""
}

func (m *MetricFamily) GetType() MetricType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MetricType_COUNTER
}

func (m *MetricFamily) GetMetric() []*Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterType((*LabelPair)(nil), "io.prometheus.client.LabelPair")
	proto.RegisterType((*Gauge)(nil), "io.prometheus.client.Gauge")
	proto.RegisterType((*Counter)(nil), "io.prometheus.client.Counter")
	proto.RegisterType((*Quantile)(nil), "io.prometheus.client.Quantile")
	proto.RegisterType((*Summary)(nil), "io.prometheus.client.Summary")
	proto.RegisterType((*Untyped)(nil), "io.prometheus.client.Untyped")
	proto.RegisterType((*Histogram)(nil), "io.prometheus.client.Histogram")
	proto.RegisterType((*Bucket)(nil), "io.prometheus.client.Bucket")
	proto.RegisterType((*Metric)(nil), "io.prometheus.client.Metric")
	proto.RegisterType((*MetricFamily)(nil), "io.prometheus.client.MetricFamily")
	proto.RegisterEnum("io.prometheus.client.MetricType", MetricType_name, MetricType_value)
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6f, 0xd3, 0x3e,
	0x1c, 0xfd, 0x66, 0x4d, 0xda, 0xe5, 0x93, 0xed, 0x4b, 0x64, 0x4d, 0x28, 0x02, 0xc6, 0x4a, 0x4f,
	0x83, 0x43, 0x25, 0xaa, 0x4d, 0x48, 0x08, 0x0e, 0xed, 0x28, 0x1d, 0x12, 0xd9, 0x86, 0xdb, 0x1e,
	0x76, 0xaa, 0xdc, 0xcc, 0x6a, 0x23, 0xe2, 0x24, 0x24, 0xf6, 0xa4, 0x9e, 0x39, 0xf0, 0x7f, 0xf0,
	0x8f, 0x82, 0xfc, 0x23, 0xed, 0x26, 0xa5, 0x3d, 0x71, 0xfb, 0xf8, 0xf9, 0xbd, 0x8f, 0x9f, 0xed,
	0x67, 0xc3, 0x21, 0xa3, 0xbc, 0x88, 0xa3, 0xb2, 0x9b, 0x17, 0x19, 0xcf, 0xd0, 0x51, 0x9c, 0xc9,
	0x8a, 0x51, 0xbe, 0xa4, 0xa2, 0xec, 0x46, 0x49, 0x4c, 0x53, 0xde, 0x39, 0x07, 0xf7, 0x2b, 0x99,
	0xd3, 0xe4, 0x86, 0xc4, 0x05, 0x42, 0x60, 0xa7, 0x84, 0xd1, 0xc0, 0x6a, 0x5b, 0xa7, 0x2e, 0x56,
	0x35, 0x3a, 0x02, 0xe7, 0x9e, 0x24, 0x82, 0x06, 0x7b, 0x0a, 0xd4, 0x83, 0xce, 0x31, 0x38, 0x23,
	0x22, 0x16, 0x0f, 0xa6, 0xa5, 0xc6, 0xaa, 0xa6, 0x4f, 0xa0, 0x75, 0x91, 0x89, 0x94, 0xd3, 0x62,
	0x0b, 0xe1, 0x03, 0xec, 0x7f, 0x13, 0x24, 0xe5, 0x71, 0x42, 0xd1, 0x33, 0xd8, 0xff, 0x61, 0x6a,
	0x43, 0x5a, 0x8f, 0x1f, 0xaf, 0xbe, 0x56, 0xff, 0xb2, 0xa0, 0x35, 0x16, 0x8c, 0x91, 0x62, 0x85,
	0x5e, 0xc1, 0x41, 0x49, 0x58, 0x9e, 0xd0, 0x59, 0x24, 0x57, 0x54, 0x1d, 0x6c, 0xec, 0x69, 0x4c,
	0x99, 0x40, 0xc7, 0x00, 0x86, 0x52, 0x0a, 0x66, 0x3a, 0xb9, 0x1a, 0x19, 0x0b, 0x86, 0xde, 0x3f,
	0x58, 0xbf, 0xd1, 0x6e, 0x9c, 0x7a, 0xbd, 0x97, 0xdd, 0xba, 0xb3, 0xea, 0x56, 0x8e, 0x37, 0xfe,
	0xe4, 0x46, 0xa7, 0x29, 0x5f, 0xe5, 0xf4, 0x6e, 0xcb, 0x46, 0x7f, 0x5a, 0xe0, 0x5e, 0xc6, 0x25,
	0xcf, 0x16, 0x05, 0x61, 0xff, 0xc0, 0xec, 0x19, 0x34, 0xe7, 0x22, 0xfa, 0x4e, 0xb9, 0xb1, 0xfa,
	0xa2, 0xde, 0xea, 0x40, 0x71, 0xb0, 0xe1, 0x76, 0x26, 0xd0, 0xd4, 0x08, 0x7a, 0x0d, 0x7e, 0x24,
	0x98, 0x48, 0x08, 0x8f, 0xef, 0x1f, 0xbb, 0x78, 0xb2, 0xc1, 0xb5, 0x93, 0x13, 0xf0, 0x44, 0x9e,
	0xd3, 0x62, 0x36, 0xcf, 0x44, 0x7a, 0x67, 0xac, 0x80, 0x82, 0x06, 0x12, 0xe9, 0xfc, 0xd9, 0x83,
	0x66, 0xa8, 0x32, 0x86, 0xce, 0xc1, 0x49, 0x64, 0x8c, 0x02, 0x4b, 0xb9, 0x3a, 0xa9, 0x77, 0xb5,
	0x4e, 0x1a, 0xd6, 0x6c, 0xf4, 0x16, 0x9c, 0x85, 0x8c, 0x91, 0x6a, 0xee, 0xf5, 0x9e, 0xd7, 0xcb,
	0x54, 0xd2, 0xb0, 0x66, 0xa2, 0x77, 0xd0, 0x8a, 0x74, 0xb4, 0x82, 0x86, 0x12, 0x1d, 0xd7, 0x8b,
	0x4c, 0xfe, 0x70, 0xc5, 0x96, 0xc2, 0x52, 0x67, 0x26, 0xb0, 0x77, 0x09, 0x4d, 0xb0, 0x70, 0xc5,
	0x96, 0x42, 0xa1, 0xef, 0x38, 0x70, 0x76, 0x09, 0x4d, 0x10, 0x70, 0xc5, 0x46, 0x1f, 0xc1, 0x5d,
	0x56, 0x57, 0x1f, 0xb4, 0x94, 0x74, 0xcb, 0xc1, 0xac, 0x13, 0x82, 0x37, 0x0a, 0x19, 0x16, 0x1e,
	0x33, 0x5a, 0x72, 0xc2, 0xf2, 0x19, 0x2b, 0x83, 0x66, 0xdb, 0x3a, 0x6d, 0x60, 0x6f, 0x8d, 0x85,
	0x65, 0xe7, 0xb7, 0x05, 0x07, 0xfa, 0x06, 0x3e, 0x13, 0x16, 0x27, 0xab, 0xda, 0x17, 0x8c, 0xc0,
	0x5e, 0xd2, 0x24, 0x37, 0x0f, 0x58, 0xd5, 0xe8, 0x0c, 0x6c, 0xe9, 0x51, 0x1d, 0xe1, 0xff, 0xbd,
	0x76, 0xbd, 0x2b, 0xdd, 0x79, 0xb2, 0xca, 0x29, 0x56, 0x6c, 0x19, 0x3e, 0xfd, 0xa7, 0x04, 0xf6,
	0xae, 0xf0, 0x69, 0x1d, 0x36, 0xdc, 0x37, 0x21, 0xc0, 0xa6, 0x13, 0xf2, 0xa0, 0x75, 0x71, 0x3d,
	0xbd, 0x9a, 0x0c, 0xb1, 0xff, 0x1f, 0x72, 0xc1, 0x19, 0xf5, 0xa7, 0xa3, 0xa1, 0x6f, 0x49, 0x7c,
	0x3c, 0x0d, 0xc3, 0x3e, 0xbe, 0xf5, 0xf7, 0xe4, 0x60, 0x7a, 0x35, 0xb9, 0xbd, 0x19, 0x7e, 0xf2,
	0x1b, 0xe8, 0x10, 0xdc, 0xcb, 0x2f, 0xe3, 0xc9, 0xf5, 0x08, 0xf7, 0x43, 0xdf, 0x1e, 0x3c, 0x85,
	0xda, 0x9f, 0xec, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x83, 0x61, 0x72, 0xef, 0x04, 0x00,
	0x00,
}
